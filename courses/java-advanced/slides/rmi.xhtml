<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="ru" xml:lang="ru" xmlns="http://www.w3.org/1999/xhtml"><head><title>Технологии Java / Сериализация и RMI</title><meta name="author" content="" /><link rel="stylesheet" type="text/css" media="screen, projection, print" href="scripts/slidy.css" /><link rel="stylesheet" type="text/css" href="scripts/prettify.css" /><link rel="stylesheet" type="text/css" href="scripts/kgeorgiy-slides.css" /><script type="text/javascript" src="scripts/slidy.js" charset="utf-8" /><script type="text/javascript" src="scripts/kgeorgiy-slides.js" charset="utf-8" /><script type="text/javascript" src="scripts/prettify.js" /><script type="text/javascript" src="scripts/lang-sql.js" /><script type="text/javascript" src="scripts/lang-javaModule.js" /><script type="text/javascript" src="scripts/lang-scala.js" /><script>var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-37693764-1"]);_gaq.push(["_setDomainName","kgeorgiy.info"]);_gaq.push(["_trackPageview"]);(function(){var a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var b=document.getElementsByTagName("script")[0];b.parentNode.insertBefore(a,b)})();</script><script async="async" src="https://www.googletagmanager.com/gtag/js?id=G-8EQ66D87ZZ" /><script>
                  window.dataLayer = window.dataLayer || [];
                  function gtag(){dataLayer.push(arguments);}
                  gtag('js', new Date());

                  gtag('config', 'G-8EQ66D87ZZ');
                </script></head><body onload="prettyPrint()"><div id="all">
<div class="slide cover"><div class="content"><div class="course">Технологии Java</div><hr /><div class="lecture"><div>Сериализация и RMI</div></div><div class="link"><a href="https://kgeorgiy.info/courses/java-advanced/">https://kgeorgiy.info/courses/java-advanced/</a></div><div class="copyright"><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.ru"><span class="copyright">Copyright © Georgiy Korneev</span><img src="scripts/by-nc-sa.png" alt="Attribution-NonCommercial-ShareAlike" /></a></div></div></div>
<div class="slide section"><div class="content"><h1>Сериализация</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc current">Сериализация</a><ol class="level-2 toc-2"><li><a href="#(7)" class="">Как это устроено</a></li><li><a href="#(15)" class="">Пример ручной сериализации</a></li><li><a href="#(24)" class="">Подменные объекты</a></li></ol></li><li><a href="#(27)" class="toc">Remote Method Invocation</a></li><li><a href="#(57)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">2</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Сериализация и десериализация</h1><div class="body"><ul class="item-1 level-1"><li>Сериализация – запись объекта в байтовый поток</li><li>Десериализация – чтение объекта из байтового потока</li><li>Пакет <var>java.io</var></li><li>Сериализуется граф достижимых объектов</li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">3</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Сериализация объектов</h1><div class="body"><ul class="item-1 level-1"><li>Запись объектов<ul class="item-2 level-2"><li>Интерфейс <var><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/ObjectOutput.html" target="_blank">ObjectOutput</a></var> extends <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/DataOutput.html" target="_blank">DataOutput</a></var></var></li><li>Класс <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/ObjectOutputStream.html" target="_blank">ObjectOutputStream</a></var></li><li>Метод <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/ObjectOutputStream.html#writeObject(java.lang.Object)" target="_blank">writeObject(object)</a></var></li><li>Исключение <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/NotSerializableException.html" target="_blank">NotSerializableException</a></var></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">4</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Десериализация объектов</h1><div class="body"><ul class="item-1 level-1"><li>Чтение объектов<ul class="item-2 level-2"><li>Интерфейс <var><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/ObjectInput.html" target="_blank">ObjectInput</a></var> extends <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/DataInput.html" target="_blank">DataInput</a></var></var></li><li>Класс <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/ObjectInputStream.html" target="_blank">ObjectInputStream</a></var></li><li>Метод <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/ObjectInputStream.html#readObject()" target="_blank">readObject()</a></var></li><li>Исключения<ul class="item-3 level-3"><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/ClassNotFoundException.html" target="_blank">ClassNotFoundException</a></var></li><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/InvalidClassException.html" target="_blank">InvalidClassException</a></var></li></ul></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">5</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Что можно сериализовать</h1><div class="body"><ul class="item-1 level-1"><li>Автоматически сериализуемые классы<ul class="item-2 level-2"><li>Маркерный интерфейс <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/Serializable.html" target="_blank">Serializable</a></var></li></ul></li><li>Классы, сериализуемые вручную<ul class="item-2 level-2"><li>Интерфейс <var><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/Externalizable.html" target="_blank">Externalizable</a></var> extends <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/Serializable.html" target="_blank">Serializable</a></var></var></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">6</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Как это устроено</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc current">Сериализация</a><ol class="level-2 toc-2"><li><a href="#(7)" class=" current">Как это устроено</a></li><li><a href="#(15)" class="">Пример ручной сериализации</a></li><li><a href="#(24)" class="">Подменные объекты</a></li></ol></li><li><a href="#(27)" class="toc">Remote Method Invocation</a></li><li><a href="#(57)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">7</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Автоматическая сериализация</h1><div class="body"><ul class="item-1 level-1"><li>Запись<ul class="item-2 level-2"><li>Записывается предок</li><li>Записываются значения всех полей, не имеющих модификатора <var>transient</var></li></ul></li><li>Чтение<ul class="item-2 level-2"><li>Выделяется память под объект</li><li>Считывается предок</li><li>Считываются значения всех полей, не имеющих модификатора <var>transient</var></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">8</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Автоматическая сериализация</h1><div class="body"><ul class="item-1 level-1"><li><pre class="prettyprint lang-java">public class Data implements Serializable {
    private List&lt;Integer&gt; data;
    ...
}
</pre></li><li><pre class="prettyprint lang-java">public class Data2 extends Data {
    private transient String toStringCache;
    ...
}
</pre><ul class="item-2 level-2"><li><span class="question">Почему transient?</span></li><li class="incremental"><div class="non-incremental">Закэшированное значение можно посчитать заново</div></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">9</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Сериализация вручную</h1><div class="body"><ul class="item-1 level-1"><li>Интерфейс <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/Externalizable.html" target="_blank">Externalizable</a></var></li><li>Методы<ul class="item-2 level-2"><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/Externalizable.html#readExternal(java.io.ObjectInput)" target="_blank">readExternal(objectInput)</a></var> – читает состояние</li><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/Externalizable.html#writeExternal(java.io.ObjectOutput)" target="_blank">writeExternal(objectOutput)</a></var> – пишет состояние</li></ul></li><li>Запись<ul class="item-2 level-2"><li>Вызов <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/Externalizable.html#writeExternal(java.io.ObjectOutput)" target="_blank">writeExternal(objectOutput)</a></var></li></ul></li><li>Чтение<ul class="item-2 level-2"><li>Создание конструктором по умолчанию</li><li>Вызов <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/Externalizable.html#readExternal(java.io.ObjectInput)" target="_blank">readExternal(objectInput)</a></var></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">10</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Настраиваемая сериализация</h1><div class="body"><ul class="item-1 level-1"><li>Применяется для обеспечения обратной совместимости</li><li>Методы<ul class="item-2 level-2"><li><var>readObject(ObjectInputStream in)</var> – должен прочесть состояние из потока</li><li><var>writeObject(ObjectOutputStream out)</var> – должен записать состояние в поток</li></ul></li><li>Процесс чтения<ul class="item-2 level-2"><li>Выделение памяти</li><li>Вызов метода <var>readObject</var></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">11</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Сериализация с несериал. предком</h1><div class="body"><ul class="item-1 level-1"><li>Предок<ul class="item-2 level-2"><li>Конструктор по умолчанию</li></ul></li><li>Потомок<ul class="item-2 level-2"><li>Сериализация предка</li><li>Сериализация себя<ul class="item-3 level-3"><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/ObjectOutputStream.html#defaultWriteObject()" target="_blank">objectOutputStream.defaultWriteObject()</a></var> – записывает поля текущего класса</li><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/ObjectInputStream.html#defaultReadObject()" target="_blank">objectInputStream.defaultReadObject()</a></var> – считывает поля текущего класса</li></ul></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">12</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Версии сериализованных классов</h1><div class="body"><ul class="item-1 level-1"><li>Применяется для обеспечения совместимости когда версии сериализованного объекта меняются</li><li>Поле<ul class="item-2 level-2"><li><pre class="prettyprint lang-java">private static final long serialVersionUID
</pre></li></ul></li><li>Инструмент<ul class="item-2 level-2"><li><pre class="prettyprint lang-java">serialver &lt;имя класса&gt;
</pre></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">13</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Ручная сериализация полей</h1><div class="body"><ul class="item-1 level-1"><li>Cериализуемые поля<ul class="item-2 level-2"><li><var><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/ObjectStreamField.html" target="_blank">ObjectStreamField</a></var>[] serialPersistentFields</var></li></ul></li><li>Запись<ul class="item-2 level-2"><li><var><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/ObjectOutputStream.html" target="_blank">ObjectOutputStream</a></var>.<var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/ObjectOutputStream.PutField.html" target="_blank">PutField</a></var> <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/ObjectOutputStream.html#putFields()" target="_blank">putFields()</a></var></var> – поля для записи</li><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/ObjectOutputStream.html#writeFields()" target="_blank">writeFields()</a></var> – записывает поля</li></ul></li><li>Чтение<ul class="item-2 level-2"><li><var><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/ObjectInputStream.html" target="_blank">ObjectInputStream</a></var>.<var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/ObjectInputStream.GetField.html" target="_blank">GetField</a></var> <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/io/ObjectInputStream.html#readFields()" target="_blank">readFields()</a></var></var> – читает поля из потока</li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">14</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Пример ручной сериализации</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc current">Сериализация</a><ol class="level-2 toc-2"><li><a href="#(7)" class="">Как это устроено</a></li><li><a href="#(15)" class=" current">Пример ручной сериализации</a></li><li><a href="#(24)" class="">Подменные объекты</a></li></ol></li><li><a href="#(27)" class="toc">Remote Method Invocation</a></li><li><a href="#(57)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">15</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Пример ручной сериализации</h1><div class="body"><ul class="item-1 level-1"><li>Старая версия<ul class="item-2 level-2"><li><pre class="prettyprint lang-java">class Rectangle {
    int x1, y1, x2, y2
    // toString
    String.format("%d %d %d %d", x1, y1, x2, y2);
}
</pre></li></ul></li><li>Новая версия<ul class="item-2 level-2"><li><pre class="prettyprint lang-java">class Rectangle {
    int x1, y1, w, h;
    // toString
    String.format("%d %d %d %d", x1, y1, x1+w, y1+h);
}
</pre></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">16</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Ввод-вывод</h1><div class="body"><ul class="item-1 level-1"><li>Записываем старую версию<ul class="item-2 level-2"><li><pre class="prettyprint lang-java">ObjectOutputStream oos = ...
oos.writeObject(new Rectangle(1, 2, 10, 20));
</pre></li></ul></li><li>Читаем новую версию<ul class="item-2 level-2"><li><pre class="prettyprint lang-java">ObjectInputStream ois = ...
System.out.println(ois.readObject());
</pre></li></ul></li><li><span class="question">Результат?</span><ul class="item-2 level-2"><li class="incremental"><div class="non-incremental"><var>local class incompatible: stream classdesc serialVersionUID = 6729985638487173456, local class serialVersionUID = 7264412103486061129</var></div></li><li class="incremental"><div class="non-incremental"><span class="question">Как чинить?</span></div></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">17</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Добавим serialVersionUID</h1><div class="body"><ul class="item-1 level-1"><li>Изменения<ul class="item-2 level-2"><li><pre class="prettyprint lang-java">private static final long serialVersionUID =
    6729985638487173456L;
</pre></li></ul></li><li><span class="question">Результат?</span><ul class="item-2 level-2"><li class="incremental"><div class="non-incremental"><var>1 2 1 2</var></div></li><li class="incremental"><div class="non-incremental"><span class="question">Но как???</span></div></li><li class="incremental"><div class="non-incremental">Лишние поля → пропускаются</div></li><li class="incremental"><div class="non-incremental">Отсутствующие поля → значения по умолчанию <pre class="prettyprint lang-java">w == h == 0
</pre></div></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">18</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Добавим описание полей</h1><div class="body"><ul class="item-1 level-1"><li>Изменения<ul class="item-2 level-2"><li><pre class="prettyprint lang-java">private static final ObjectStreamField[]
    serialPersistentFields = new ObjectStreamField[]{
        new ObjectStreamField("x1", int.class),
        new ObjectStreamField("y1", int.class),
        new ObjectStreamField("w", int.class),
        new ObjectStreamField("h", int.class)
    };
</pre></li></ul></li><li><span class="question">Результат?</span><ul class="item-2 level-2"><li class="incremental"><div class="non-incremental"><var>1 2 1 2</var></div></li><li class="incremental"><div class="non-incremental">Ничего не поменялось</div></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">19</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Добавим readObject</h1><div class="body"><ul class="item-1 level-1"><li>Изменения<ul class="item-2 level-2"><li><pre class="prettyprint lang-java">private void readObject(final ObjectInputStream in) 
        throws IOException 
{
    ObjectInputStream.GetField fields = in.readFields();
    x1 = fields.get("x1", 0);
    y1 = fields.get("y1", 0);
    w = fields.get("x2", 0) - x1;
    h = fields.get("y2", 0) - y1;
}
</pre></li></ul></li><li><span class="question">Результат?</span><ul class="item-2 level-2"><li class="incremental"><div class="non-incremental"><var>1 2 10 20</var></div></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">20</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Победа?</h1><div class="body"><ul class="item-1 level-1"><li>Записываем <em>новую</em> версию<ul class="item-2 level-2"><li><pre class="prettyprint lang-java">ObjectOutputStream oos = ...
oos.writeObject(new Rectangle(1, 2, 10, 20));
</pre></li></ul></li><li>Читаем <em>новую</em> версию<ul class="item-2 level-2"><li><pre class="prettyprint lang-java">ObjectInputStream ois = ...
System.out.println(ois.readObject());
</pre></li></ul></li><li><span class="question">Результат?</span><ul class="item-2 level-2"><li class="incremental"><div class="non-incremental"><var>no such field x2 with type int</var></div></li><li class="incremental"><div class="non-incremental">Новая версия записывает <var>w</var> и <var>h</var></div></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">21</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Добавим writeObject</h1><div class="body"><ul class="item-1 level-1"><li>Изменения<ul class="item-2 level-2"><li><pre class="prettyprint lang-java">private void writeObject(final ObjectOutputStream out) 
        throws IOException {
    ObjectOutputStream.PutField fields = out.putFields();
    fields.put("x1", x1);
    fields.put("y1", y1);
    fields.put("x2", x1 + w);
    fields.put("y2", y1 + h);
    out.writeFields();
}
</pre></li></ul></li><li><span class="question">Результат?</span><ul class="item-2 level-2"><li class="incremental"><div class="non-incremental"><var>no such field x2 with type int</var></div></li><li class="incremental"><div class="non-incremental">В <var>serialPersistentFields</var> указаны <var>w</var> и <var>h</var></div></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">22</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Исправим описание полей</h1><div class="body"><ul class="item-1 level-1"><li>Изменения<ul class="item-2 level-2"><li><pre class="prettyprint lang-java">private static final ObjectStreamField[]
    serialPersistentFields = new ObjectStreamField[]{
        new ObjectStreamField("x1", int.class),
        new ObjectStreamField("y1", int.class),
        new ObjectStreamField("x2", int.class),
        new ObjectStreamField("y2", int.class)
    };
</pre></li></ul></li><li><span class="question">Результат?</span><ul class="item-2 level-2"><li class="incremental"><div class="non-incremental"><var>1 2 10 20</var></div></li><li class="incremental"><div class="non-incremental">Это победа!</div></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">23</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Подменные объекты</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc current">Сериализация</a><ol class="level-2 toc-2"><li><a href="#(7)" class="">Как это устроено</a></li><li><a href="#(15)" class="">Пример ручной сериализации</a></li><li><a href="#(24)" class=" current">Подменные объекты</a></li></ol></li><li><a href="#(27)" class="toc">Remote Method Invocation</a></li><li><a href="#(57)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">24</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Мотивация</h1><div class="body"><ul class="item-1 level-1"><li><span class="question">Что будет, если десериализовать <var>enum</var>?</span><ul class="item-2 level-2"><li class="incremental"><div class="non-incremental">Это работает</div></li><li class="incremental"><div class="non-incremental">Новые элементы не создаются</div></li></ul></li><li class="incremental"><div class="non-incremental"><span class="question">Что будет, если десериализовать <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Class.html" target="_blank">Class</a></var>?</span><ul class="item-2 level-2"><li class="incremental"><div class="non-incremental">Это работает</div></li><li class="incremental"><div class="non-incremental">Каждый <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Class.html" target="_blank">Class</a></var> остается уникальным</div></li></ul></div></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">25</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Подмена объекта</h1><div class="body"><ul class="item-1 level-1"><li>Применяется, когда сам объект не должен сериализовываться</li><li>Какой объект записать<ul class="item-2 level-2"><li><var><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Object.html" target="_blank">Object</a></var> writeReplace()</var></li></ul></li><li>Какой объект вернуть<ul class="item-2 level-2"><li><var><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Object.html" target="_blank">Object</a></var> readResolve()</var></li><li>Реализуются у разных классов</li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">26</span></div></div></div></div>
<div class="slide section"><div class="content"><h1>Remote Method Invocation</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc">Сериализация</a></li><li><a href="#(27)" class="toc current">Remote Method Invocation</a><ol class="level-2 toc-2"><li><a href="#(28)" class="">Общее устройство</a></li><li><a href="#(34)" class="">Сборка мусора</a></li><li><a href="#(38)" class="">Поиск удалённых объектов</a></li><li><a href="#(42)" class="">Пример</a></li><li><a href="#(53)" class="">Дополнительные возможности RMI</a></li></ol></li><li><a href="#(57)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">27</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Общее устройство</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc">Сериализация</a></li><li><a href="#(27)" class="toc current">Remote Method Invocation</a><ol class="level-2 toc-2"><li><a href="#(28)" class=" current">Общее устройство</a></li><li><a href="#(34)" class="">Сборка мусора</a></li><li><a href="#(38)" class="">Поиск удалённых объектов</a></li><li><a href="#(42)" class="">Пример</a></li><li><a href="#(53)" class="">Дополнительные возможности RMI</a></li></ol></li><li><a href="#(57)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">28</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Remote Method Invocation</h1><div class="body"><ul class="item-1 level-1"><li>Механизм, позволяющий объектам из одной Java-машины вызывать методы другой Java-машины</li><li>Работает по сети</li><li>Пакет <var>java.rmi</var></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">29</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Схема взаимодействия</h1><div class="body"><ul class="item-1 level-1"><li>Обработка запроса </li></ul><div class="img-width"><img class="width" style="width: 75%" src="pics/RMIRequest.svg" /></div><ul class="item-1 level-1"><li>Возврат результата </li></ul><div class="img-width"><img class="width" style="width: 75%" src="pics/RMIResponse.svg" /></div></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">30</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Удалённые интерфейсы</h1><div class="body"><ul class="item-1 level-1"><li>Удалённый интерфейс – интерфейс, унаследованный от <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/Remote.html" target="_blank">Remote</a></var></li><li>Все методы удалённых интерфейсов должны бросать <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/RemoteException.html" target="_blank">RemoteException</a></var></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">31</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Передача данных</h1><div class="body"><ul class="item-1 level-1"><li>Удалённые объекты<ul class="item-2 level-2"><li>Удалённые ссылки</li></ul></li><li>Остальные объекты<ul class="item-2 level-2"><li>По значению</li><li>Сериализация</li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">32</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Stub и Skeleton</h1><div class="body"><ul class="item-1 level-1"><li><var>Stub</var> и <var>Skeleton</var> генерируются по удалённому классу</li><li><var>Stub</var> служит для передачи данных по сети<ul class="item-2 level-2"><li>Реализует все удалённые интерфейсы класса и только их</li></ul></li><li><var>Skeleton</var> служит для приема данных по сети<ul class="item-2 level-2"><li>Вызывает методы реального объекта</li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">33</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Сборка мусора</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc">Сериализация</a></li><li><a href="#(27)" class="toc current">Remote Method Invocation</a><ol class="level-2 toc-2"><li><a href="#(28)" class="">Общее устройство</a></li><li><a href="#(34)" class=" current">Сборка мусора</a></li><li><a href="#(38)" class="">Поиск удалённых объектов</a></li><li><a href="#(42)" class="">Пример</a></li><li><a href="#(53)" class="">Дополнительные возможности RMI</a></li></ol></li><li><a href="#(57)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">34</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Мотивация</h1><div class="body"><ul class="item-1 level-1"><li><span class="question">Когда можно убрать удалённый объект?</span></li><li class="incremental"><div class="non-incremental">Когда на него нет ссылок<ul class="item-2 level-2"><li>Локальные ссылки</li><li>Удалённые ссылки</li></ul></div></li><li class="incremental"><div class="non-incremental">Объекты могут передаваться по цепочке<ul class="item-2 level-2"><li>Неизвестно кому</li><li>Даже нам самим</li></ul></div></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">35</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Механизм лизинга</h1><div class="body"><ul class="item-1 level-1"><li>Объект можно «одолжить» у владельца<ul class="item-2 level-2"><li>На время <var>T</var></li></ul></li><li>Если объект нужен<ul class="item-2 level-2"><li>Продлить «займ» через <var>T/2</var></li><li>Может не удаться</li></ul></li><li>Если объект не нужен<ul class="item-2 level-2"><li>Ничего не делать</li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">36</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Distributed Garbage Collecting</h1><div class="body"><ul class="item-1 level-1"><li>Удаление объектов, на которые больше нет ссылок в распределенной среде</li><li>Интерфейс <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/server/Unreferenced.html" target="_blank">Unreferenced</a></var><ul class="item-2 level-2"><li>Метод <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/server/Unreferenced.html#unreferenced()" target="_blank">unreferenced()</a></var></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">37</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Поиск удалённых объектов</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc">Сериализация</a></li><li><a href="#(27)" class="toc current">Remote Method Invocation</a><ol class="level-2 toc-2"><li><a href="#(28)" class="">Общее устройство</a></li><li><a href="#(34)" class="">Сборка мусора</a></li><li><a href="#(38)" class=" current">Поиск удалённых объектов</a></li><li><a href="#(42)" class="">Пример</a></li><li><a href="#(53)" class="">Дополнительные возможности RMI</a></li></ol></li><li><a href="#(57)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">38</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Поиск удалённых объектов (1)</h1><div class="body"><ul class="item-1 level-1"><li>Ссылки на удалённые объекты публикуются в <var>RMI registry</var></li><li>удалённые объекты ищутся по <var>URL</var> вида <var>//&lt;host&gt;:&lt;port&gt;/&lt;object&gt;</var>, где<ul class="item-2 level-2"><li><var>host:port</var> – местоположение RMI registry</li><li><var>object</var> – зарегистрированное имя объекта</li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">39</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Поиск удалённых объектов (2)</h1><div class="body"><ul class="item-1 level-1"><li>Класс <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/Naming.html" target="_blank">Naming</a></var> – интерфейс к RMI registry</li><li>Методы класса<ul class="item-2 level-2"><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/Naming.html#bind(java.lang.String,java.rmi.Remote)" target="_blank">bind(name, object)</a></var> – зарегистрировать объект</li><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/Naming.html#lookup(java.lang.String)" target="_blank">lookup(name)</a></var> – получить объект по имени</li><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/Naming.html#unbind(java.lang.String)" target="_blank">unbind(name)</a></var> – отменить регистрацию объекта</li><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/Naming.html#rebind(java.lang.String,java.rmi.Remote)" target="_blank">rebind(name, object)</a></var> – зарегистрировать новый объект</li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">40</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Экспорт объектов</h1><div class="body"><ul class="item-1 level-1"><li>Прежде чем быть переданным на другую машину, объект должен быть экспортирован</li><li>Метод<ul class="item-2 level-2"><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/server/UnicastRemoteObject.html#exportObject(java.rmi.Remote)" target="_blank">UnicastRemoteObject.exportObject(object)</a></var></li></ul></li><li>Наследники <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/server/UnicastRemoteObject.html" target="_blank">UnicastRemoteObject</a></var> экспортируются автоматически</li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">41</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Пример</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc">Сериализация</a></li><li><a href="#(27)" class="toc current">Remote Method Invocation</a><ol class="level-2 toc-2"><li><a href="#(28)" class="">Общее устройство</a></li><li><a href="#(34)" class="">Сборка мусора</a></li><li><a href="#(38)" class="">Поиск удалённых объектов</a></li><li><a href="#(42)" class=" current">Пример</a></li><li><a href="#(53)" class="">Дополнительные возможности RMI</a></li></ol></li><li><a href="#(57)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">42</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Банк</h1><div class="body"><ul class="item-1 level-1"><li>Cчета идентифицируются строками</li><li>По счету можно<ul class="item-2 level-2"><li>Узнать идентификатор</li><li>Узнать сумму денег на счете</li><li>Изменить сумму денег на счете</li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">43</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Удалённый интерфейс банка</h1><div class="body"><ul class="item-2 level-2"><li><pre class="prettyprint lang-java">public interface Bank extends Remote {
    // Создает счет
    public Account createAccount(String id)
        throws RemoteException;
     
    // Возвращает счет
    public Account getAccount(String id)
        throws RemoteException;
}
</pre></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">44</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Удалённый интерфейс счета</h1><div class="body"><ul class="item-2 level-2"><li><pre class="prettyprint lang-java">public interface Account extends Remote {
    // Идентификатор
    public String getId() throws RemoteException;
     
    // Количество денег
    public int getAmount() throws RemoteException;
     
    // Изменить количество денег
    public void setAmount(int amount)
        throws RemoteException;
}
</pre></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">45</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Реализация счета</h1><div class="body"><ul class="item-1 level-1"><li><pre class="prettyprint lang-java">class RemoteAccount implements Account {
    public String getId() {
        return id;
    }
    public int getAmount() {
        return amount;
    }
    public void setAmount(int amount) {
        this.amount = amount;
    }
}
</pre></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">46</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Реализация банка</h1><div class="body"><ul class="item-1 level-1"><li><pre class="prettyprint lang-java">class RemoteBank implements Bank {
    public Account createAccount(String id) {
        Account account = new RemoteAccount(id);
        accounts.put(id, account);
        return account;
    }
    public Account getAccount(String id) {
        return accounts.get(id);
    }
}
</pre></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">47</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Сервер</h1><div class="body"><ul class="item-1 level-1"><li>Регистрация банка в <var>RMI registry</var><ul class="item-2 level-2"><li><pre class="prettyprint lang-java">Bank bank = new RemoteBank();
try {
    UnicastRemoteObject.exportObject(bank);
    Naming.rebind("//localhost/bank", bank);
} catch (RemoteException e) {
    System.out.println("Cannot export object: " +
        e.getMessage());
} catch (MalformedURLException e) {
    System.out.println("Malformed URL");
}
</pre></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">48</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Клиент (1)</h1><div class="body"><ul class="item-1 level-1"><li>Получение ссылки на банк<ul class="item-2 level-2"><li><pre class="prettyprint lang-java">Bank bank;
try {
    bank = (Bank) Naming.lookup("//localhost/bank");
} catch (NotBoundException e) {
    System.out.println("Bank is not bound");
    return;
} catch (MalformedURLException e) {
    System.out.println("Bank URL is invalid");
    return;
}
</pre></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">49</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Клиент (2)</h1><div class="body"><ul class="item-1 level-1"><li>Создание счета<ul class="item-2 level-2"><li><pre class="prettyprint lang-java">Account account = bank.getAccount("geo");
if (account == null) {
    System.out.println("Creating account");
    account = bank.createAccount("geo");
} else {
    System.out.println("Account already exists");
}
</pre></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">50</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Клиент (3)</h1><div class="body"><ul class="item-1 level-1"><li>Операции со счетом<ul class="item-2 level-2"><li><pre class="prettyprint lang-java">System.out.println("Money: " + account.getAmount());
System.out.println("Adding money");
account.setAmount(account.getAmount() + 100);
System.out.println("Money: " + account.getAmount());
</pre></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">51</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Запуск</h1><div class="body"><ul class="item-1 level-1"><li>Создание <var>Stub</var> для классов<ul class="item-2 level-2"><li>Этот шаг можно пропустить</li><li><pre class="prettyprint lang-java">rmic RemoteAccount RemoteBank
</pre></li></ul></li><li>Запуск RMI Registry<ul class="item-2 level-2"><li><pre class="prettyprint lang-java">rmiregistry
</pre></li></ul></li><li>Запуск сервера</li><li>Запуск клиента</li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">52</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Дополнительные возможности RMI</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc">Сериализация</a></li><li><a href="#(27)" class="toc current">Remote Method Invocation</a><ol class="level-2 toc-2"><li><a href="#(28)" class="">Общее устройство</a></li><li><a href="#(34)" class="">Сборка мусора</a></li><li><a href="#(38)" class="">Поиск удалённых объектов</a></li><li><a href="#(42)" class="">Пример</a></li><li><a href="#(53)" class=" current">Дополнительные возможности RMI</a></li></ol></li><li><a href="#(57)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">53</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Фабрики сокетов</h1><div class="body"><ul class="item-1 level-1"><li>Класс <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/server/RMIClientSocketFactory.html" target="_blank">RMIClientSocketFactory</a></var> – фабрика клиентских сокетов<ul class="item-2 level-2"><li>Метод <var><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/net/Socket.html" target="_blank">Socket</a></var> <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/server/RMIClientSocketFactory.html#createSocket(java.lang.String,int)" target="_blank">createSocket(host, port)</a></var></var></li></ul></li><li>Класс <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/server/RMIServerSocketFactory.html" target="_blank">RMIServerSocketFactory</a></var> – фабрика серверных сокетов<ul class="item-2 level-2"><li>Метод <var><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/net/ServerSocket.html" target="_blank">ServerSocket</a></var> <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/server/RMIServerSocketFactory.html#createServerSocket(int)" target="_blank">createServerSocket(port)</a></var></var></li></ul></li><li>Класс <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/server/RMISocketFactory.html" target="_blank">RMISocketFactory</a></var> – фабрика сокетов, применяемая по умолчанию</li><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/server/UnicastRemoteObject.html#exportObject(java.rmi.Remote,int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)" target="_blank">UnicastRemoteObject.exportObject(object, port, csf, ssf)</a></var> – экспортирует объект</li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">54</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Создание Registry на лету</h1><div class="body"><ul class="item-1 level-1"><li>Интерфейс <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/registry/Registry.html" target="_blank">Registry</a></var> – экземпляр RMI registry</li><li>Класс <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/registry/LocateRegistry.html" target="_blank">LocateRegistry</a></var> – позволяет находить и создавать экземпляры RMI registry<ul class="item-2 level-2"><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/registry/LocateRegistry.html#getRegistry(java.lang.String,int)" target="_blank">getRegistry(host?, port?)</a></var> – найти RMI registry</li><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.rmi/java/rmi/registry/LocateRegistry.html#createRegistry(int)" target="_blank">createRegistry(port)</a></var> – создать экземпляр RMI registry</li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">55</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Что пропущено</h1><div class="body"><ul class="item-1 level-1"><li><var>Activation</var> – технология, позволяющая создавать удалённые объекты</li><li>Загрузка <var>.class</var> файлов с HTTP сервера</li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">56</span></div></div></div></div>
<div class="slide section"><div class="content"><h1>Заключение</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc">Сериализация</a></li><li><a href="#(27)" class="toc">Remote Method Invocation</a></li><li><a href="#(57)" class="toc current">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">57</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Ссылки по сериализации</h1><div class="body"><ul class="item-1 level-1"><li>Java Object Serialization Specification // <a href="https://docs.oracle.com/en/java/javase/11/docs/specs/serialization/index.html" target="_blank">https://docs.oracle.com/en/java/javase/11/<br />docs/specs/serialization/index.html</a></li><li>Java Object Serialization (Guide) // <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/serialization/" target="_blank">http://docs.oracle.com/javase/8/<br />docs/technotes/guides/serialization/</a></li><li>Serialization FAQ // <a href="http://www.oracle.com/technetwork/java/javase/tech/serializationfaq-jsp-136699.html" target="_blank">http://www.oracle.com/technetwork/java/<br />javase/tech/serializationfaq-jsp-136699.html</a></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">58</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Ссылки по RMI</h1><div class="body"><ul class="item-1 level-1"><li>Java RMI Specification // <a href="https://docs.oracle.com/en/java/javase/11/docs/specs/rmi/index.html" target="_blank">https://docs.oracle.com/en/java/javase/11/<br />docs/specs/rmi/index.html</a></li><li>The Java Remote Method Invocation API // <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/rmi/" target="_blank">http://docs.oracle.com/javase/8/<br />docs/technotes/guides/rmi/</a></li><li>RMI Tutorial // <a href="https://docs.oracle.com/javase/tutorial/rmi/" target="_blank">https://docs.oracle.com/javase/tutorial/rmi/</a></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">59</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Вопросы</h1><div class="body"><div class="questions">???</div></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Сериализация и RMI</span><span class="number">60</span></div></div></div></div></div></body></html>