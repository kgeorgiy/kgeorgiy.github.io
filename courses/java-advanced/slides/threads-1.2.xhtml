<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="ru" xml:lang="ru" xmlns="http://www.w3.org/1999/xhtml"><head><title>Технологии Java / Взаимодействие потоков</title><meta name="author" content="" /><link rel="stylesheet" type="text/css" media="screen, projection, print" href="scripts/slidy.css" /><link rel="stylesheet" type="text/css" href="scripts/prettify.css" /><link rel="stylesheet" type="text/css" href="scripts/kgeorgiy-slides.css" /><script type="text/javascript" src="scripts/slidy.js" charset="utf-8" /><script type="text/javascript" src="scripts/kgeorgiy-slides.js" charset="utf-8" /><script type="text/javascript" src="scripts/prettify.js" /><script type="text/javascript" src="scripts/lang-sql.js" /><script type="text/javascript" src="scripts/lang-javaModule.js" /><script type="text/javascript" src="scripts/lang-scala.js" /><script>var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-37693764-1"]);_gaq.push(["_setDomainName","kgeorgiy.info"]);_gaq.push(["_trackPageview"]);(function(){var a=document.createElement("script");a.type="text/javascript";a.async=!0;a.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var b=document.getElementsByTagName("script")[0];b.parentNode.insertBefore(a,b)})();</script><script async="async" src="https://www.googletagmanager.com/gtag/js?id=G-8EQ66D87ZZ" /><script>
                  window.dataLayer = window.dataLayer || [];
                  function gtag(){dataLayer.push(arguments);}
                  gtag('js', new Date());

                  gtag('config', 'G-8EQ66D87ZZ');
                </script></head><body onload="prettyPrint()"><div id="all">
<div class="slide cover"><div class="content"><div class="course">Технологии Java</div><hr /><div class="lecture"><div>Взаимодействие потоков</div></div><div class="link"><a href="https://kgeorgiy.info/courses/java-advanced/">https://kgeorgiy.info/courses/java-advanced/</a></div><div class="copyright"><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/deed.ru"><span class="copyright">Copyright © Georgiy Korneev</span><img src="scripts/by-nc-sa.png" alt="Attribution-NonCommercial-ShareAlike" /></a></div></div></div>
<div class="slide section"><div class="content"><h1>Синхронизация</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc current">Синхронизация</a><ol class="level-2 toc-2"><li><a href="#(3)" class="">Блокировки</a></li><li><a href="#(8)" class="">Пример</a></li><li><a href="#(13)" class="">Мониторы и условия</a></li><li><a href="#(20)" class="">Монитор как примитив</a></li></ol></li><li><a href="#(24)" class="toc">Модель памяти Java</a></li><li><a href="#(45)" class="toc">Примеры</a></li><li><a href="#(52)" class="toc">Советы и рекомендации</a></li><li><a href="#(66)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">2</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Блокировки</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc current">Синхронизация</a><ol class="level-2 toc-2"><li><a href="#(3)" class=" current">Блокировки</a></li><li><a href="#(8)" class="">Пример</a></li><li><a href="#(13)" class="">Мониторы и условия</a></li><li><a href="#(20)" class="">Монитор как примитив</a></li></ol></li><li><a href="#(24)" class="toc">Модель памяти Java</a></li><li><a href="#(45)" class="toc">Примеры</a></li><li><a href="#(52)" class="toc">Советы и рекомендации</a></li><li><a href="#(66)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">3</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Блокировка (lock, mutex)</h1><div class="body"><ul class="item-1 level-1"><li>Только один поток может владеть блокировкой</li><li>Операции<ul class="item-2 level-2"><li><var>lock</var> — получить блокировку</li><li><var>unlock</var> — отдать блокировку </li></ul></li></ul><div class="img-width"><img class="width" style="width: 70%" src="pics/Lock.svg" /></div></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">4</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Блокировки в Java</h1><div class="body"><ul class="item-1 level-1"><li>Любой объект может служить блокировкой<ul class="item-2 level-2"><li>Снятие блокировки производится автоматически</li></ul></li><li>Синтаксис <pre class="prettyprint lang-java">synchronized (o) { // Получение блокировки
…
} // Снятие блокировки
</pre></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">5</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Методы экземпляра</h1><div class="body"><ul class="item-1 level-1"><li>Метод экземпляра может быть объявлен синхронизованным <pre class="prettyprint lang-java">public synchronized int getValue() { … }
</pre></li><li>Эквивалентно <pre class="prettyprint lang-java">public int getValue() {
    synchronized (this) { … }
}
</pre></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">6</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Методы класса</h1><div class="body"><ul class="item-1 level-1"><li>Метод класса может быть объявлен синхронизованным <pre class="prettyprint lang-java">class Example {
    public static synchronized int getValue() { … }
</pre></li><li>Эквивалентно <pre class="prettyprint lang-java">class Example {
    public static int getValue() {
        synchronized (Example.class) { … }
    }
</pre></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">7</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Пример</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc current">Синхронизация</a><ol class="level-2 toc-2"><li><a href="#(3)" class="">Блокировки</a></li><li><a href="#(8)" class=" current">Пример</a></li><li><a href="#(13)" class="">Мониторы и условия</a></li><li><a href="#(20)" class="">Монитор как примитив</a></li></ol></li><li><a href="#(24)" class="toc">Модель памяти Java</a></li><li><a href="#(45)" class="toc">Примеры</a></li><li><a href="#(52)" class="toc">Советы и рекомендации</a></li><li><a href="#(66)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">8</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Производитель-потребитель</h1><div class="body"><ul class="item-1 level-1"><li>Несколько потоков производят данные</li><li>Несколько потоков потребляют данные</li><li>Данные могут храниться в очереди (не)ограниченного объема </li></ul><div class="img-width"><img class="width" style="width: 75%" src="pics/ThreadsProducerConsumer.svg" /></div></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">9</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Интерфейс очереди</h1><div class="body"><ul class="item-1 level-1"><li>Хранит один элемент <pre class="prettyprint lang-java">class Queue&lt;T&gt; {
    private E data;
    public void set(E data) { … }
    public E get() { … }
}
</pre></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">10</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Производитель</h1><div class="body"><ul class="item-1 level-1"><li>Установка значения <pre class="prettyprint lang-java">public void set(E data) {
    while (true) { // Активное ожидание
        synchronized (this) {
            if (this.data == null) {
                this.data = data;
                break;
            }
        }
    }
}
</pre></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">11</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Потребитель</h1><div class="body"><ul class="item-1 level-1"><li>Получение значения <pre class="prettyprint lang-java">public E get() {
    while (true) { // Активное ожидание
        synchronized (this) {
            if (data != null) {
                E d = data;
                data = null;
                return d;
            }
        }
    }
}
</pre></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">12</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Мониторы и условия</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc current">Синхронизация</a><ol class="level-2 toc-2"><li><a href="#(3)" class="">Блокировки</a></li><li><a href="#(8)" class="">Пример</a></li><li><a href="#(13)" class=" current">Мониторы и условия</a></li><li><a href="#(20)" class="">Монитор как примитив</a></li></ol></li><li><a href="#(24)" class="toc">Модель памяти Java</a></li><li><a href="#(45)" class="toc">Примеры</a></li><li><a href="#(52)" class="toc">Советы и рекомендации</a></li><li><a href="#(66)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">13</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Монитор</h1><div class="body"><ul class="item-1 level-1"><li>Любой объект может быть монитором</li><li>Передача событий<ul class="item-2 level-2"><li>Ожидание условия<ul class="item-3 level-3"><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Object.html#wait(long)" target="_blank">wait(time?)</a></var></li></ul></li><li>Извещение одного из ждущих потоков<ul class="item-3 level-3"><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Object.html#notify()" target="_blank">notify()</a></var></li></ul></li><li>Извещение всех ждущих потоков<ul class="item-3 level-3"><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Object.html#notifyAll()" target="_blank">notifyAll()</a></var></li></ul></li></ul></li><li>Нужно владеть блокировкой<ul class="item-2 level-2"><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/IllegalMonitorStateException.html" target="_blank">IllegalMonitorStateException</a></var></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">14</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Мониторы и блокировки</h1><div class="body"><ul class="item-1 level-1"><li>При ожидании монитора блокировка с него снимается</li><li>При извещении поток не получает управления пока не может получить блокировку обратно</li><li>Псевдокод <pre class="prettyprint lang-java">monitor.unlock()
monitor.await()
monitor.lock()
</pre></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">15</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Производитель (2)</h1><div class="body"><ul class="item-1 level-1"><li>Установка значения <pre class="prettyprint lang-java">public synchronized void set(E data)
    throws InterruptedException
{
    while (this.data != null) {
        wait(); // Пассивное ожидание
    }
    this.data = data;
    notifyAll();
}
</pre></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">16</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Потребитель (2)</h1><div class="body"><ul class="item-1 level-1"><li>Получение значения <pre class="prettyprint lang-java">public synchronized E get()
    throws InterruptedException {
    while (data == null) {
        wait(); // Пассивное ожидание
    }
    E d = data;
    data = null;
    notifyAll();
    return d;
}
</pre></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">17</span></div></div></div></div>
<div class="slide"><div class="content"><h1>notify() и notifyAll()</h1><div class="body"><ul class="item-1 level-1"><li>События одного вида<ul class="item-2 level-2"><li>Может обработать любой ждущий поток</li><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Object.html#notify()" target="_blank">notify()</a></var></li></ul></li><li>Несколько видов событий<ul class="item-2 level-2"><li>Пробуждение «не того» потока</li><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Object.html#notifyAll()" target="_blank">notifyAll()</a></var></li><li>Более дорогая операция</li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">18</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Внезапные пробуждения</h1><div class="body"><ul class="item-1 level-1"><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Object.html#wait()" target="_blank">wait()</a></var> может завершиться без <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Object.html#notify()" target="_blank">notify()</a></var><ul class="item-2 level-2"><li>Проверить наступление события</li><li>Ожидать всегда в цикле</li></ul></li><li>Идиома <pre class="prettyprint lang-java">while (требуемое условие) {
    wait();
}
</pre></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">19</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Монитор как примитив</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc current">Синхронизация</a><ol class="level-2 toc-2"><li><a href="#(3)" class="">Блокировки</a></li><li><a href="#(8)" class="">Пример</a></li><li><a href="#(13)" class="">Мониторы и условия</a></li><li><a href="#(20)" class=" current">Монитор как примитив</a></li></ol></li><li><a href="#(24)" class="toc">Модель памяти Java</a></li><li><a href="#(45)" class="toc">Примеры</a></li><li><a href="#(52)" class="toc">Советы и рекомендации</a></li><li><a href="#(66)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">20</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Монитор</h1><div class="body"><ul class="item-1 level-1"><li>Разделяемые переменные инкапсулированы в мониторе</li><li>Код в мониторе исполняется не более чем одним потоком</li><li>Условия</li><li>Операции с условиями<ul class="item-2 level-2"><li><var>wait</var> ‒ ожидание условия</li><li><var>notify</var> ‒ сообщение об условии одному потоку</li><li><var>notifyAll</var> ‒ сообщение об условии всем потокам</li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">21</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Мониторы в Java</h1><div class="body"><ul class="item-1 level-1"><li>Любой объект<ul class="item-2 level-2"><li>Все методы <var>synchronized</var></li><li>Одно событие</li></ul></li><li>На блокировках<ul class="item-2 level-2"><li>Ручная синхронизация</li><li>Много событий</li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">22</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Проблемы мониторов</h1><div class="body"><ul class="item-1 level-1"><li>Блокировка между операциями отпускается<ul class="item-2 level-2"><li>Составные операции не атомарны</li><li>Конкуренция за блокировку</li><li><span class="question">Java: огрубление блокировок</span></li></ul></li><li>Пример <span class="warn"><pre class="prettyprint lang-java">if (!queue.isEmpty()) {
    // Fail
    Object o = queue.poll();
}
</pre></span></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">23</span></div></div></div></div>
<div class="slide section"><div class="content"><h1>Модель памяти Java</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc">Синхронизация</a></li><li><a href="#(24)" class="toc current">Модель памяти Java</a><ol class="level-2 toc-2"><li><a href="#(27)" class="">Атомарность</a></li><li><a href="#(31)" class="">Видимость</a></li><li><a href="#(38)" class="">Упорядоченность</a></li><li><a href="#(41)" class="">Volatile</a></li></ol></li><li><a href="#(45)" class="toc">Примеры</a></li><li><a href="#(52)" class="toc">Советы и рекомендации</a></li><li><a href="#(66)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">24</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Модель памяти</h1><div class="body"><ul class="item-1 level-1"><li>Что может увидеть операция чтения</li><li>Однопоточная модель<ul class="item-2 level-2"><li>Результаты последней записи</li></ul></li><li>Многопоточная модель<ul class="item-2 level-2"><li><span class="question">Что такое последняя запись?</span></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">25</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Последовательная согласован.</h1><div class="body"><ul class="item-1 level-1"><li>Результат эквивалентен какому-то последовательному исполнению<ul class="item-2 level-2"><li>Внутри потока — в порядке кода</li><li>Между потоками — произвольные переключения</li></ul></li><li><span class="warn">Не гарантируется Java</span><ul class="item-2 level-2"><li>Иначе нельзя использовать регистры</li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">26</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Атомарность</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc">Синхронизация</a></li><li><a href="#(24)" class="toc current">Модель памяти Java</a><ol class="level-2 toc-2"><li><a href="#(27)" class=" current">Атомарность</a></li><li><a href="#(31)" class="">Видимость</a></li><li><a href="#(38)" class="">Упорядоченность</a></li><li><a href="#(41)" class="">Volatile</a></li></ol></li><li><a href="#(45)" class="toc">Примеры</a></li><li><a href="#(52)" class="toc">Советы и рекомендации</a></li><li><a href="#(66)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">27</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Атомарность</h1><div class="body"><ul class="item-1 level-1"><li>Атомарная операция выполняется как единое целое<ul class="item-2 level-2"><li>Значения не появляются «из ниоткуда»</li></ul></li><li>Чтение и присвоение значений являются атомарными<ul class="item-2 level-2"><li>Кроме <var>long</var> и <var>double</var></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">28</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Атомарные чтение и запись</h1><div class="body"><ul class="item-1 level-1"><li>Программа<ul class="item-2 level-2"><li>Разделяемая переменная <pre class="prettyprint lang-java">int a = 0;
</pre></li><li>Поток 1 <pre class="prettyprint lang-java">a = -1;
</pre></li><li>Поток 2 <pre class="prettyprint lang-java">System.out.println(a);
</pre></li></ul></li><li>Возможные результаты<ul class="item-2 level-2"><li><var>0</var>, <var>−1</var></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">29</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Неатомарные чтение и запись</h1><div class="body"><ul class="item-1 level-1"><li>Программа<ul class="item-2 level-2"><li>Разделяемая переменная <pre class="prettyprint lang-java">long a = 0;
</pre></li><li>Поток 1 <pre class="prettyprint lang-java">a = -1;
</pre></li><li>Поток 2 <pre class="prettyprint lang-java">System.out.println(a);
</pre></li></ul></li><li>Возможные результаты<ul class="item-2 level-2"><li><var>0</var>, <var>−1</var></li><li class="incremental"><div class="non-incremental"><span class="warn">0xffffffff</span>, <span class="warn">0xffffffff00000000</span></div></li><li class="incremental"><div class="non-incremental"><span class="warn">2</span>, <span class="warn">3</span></div></li><li class="incremental"><div class="non-incremental"><span class="warn">…</span></div></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">30</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Видимость</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc">Синхронизация</a></li><li><a href="#(24)" class="toc current">Модель памяти Java</a><ol class="level-2 toc-2"><li><a href="#(27)" class="">Атомарность</a></li><li><a href="#(31)" class=" current">Видимость</a></li><li><a href="#(38)" class="">Упорядоченность</a></li><li><a href="#(41)" class="">Volatile</a></li></ol></li><li><a href="#(45)" class="toc">Примеры</a></li><li><a href="#(52)" class="toc">Советы и рекомендации</a></li><li><a href="#(66)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">31</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Пример </h1><div class="body"><img class="height" style="height: 100%" src="pics/Visibility0.svg" /></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">32</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Пример </h1><div class="body"><img class="height" style="height: 100%" src="pics/Visibility1.svg" /></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">33</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Пример </h1><div class="body"><img class="height" style="height: 100%" src="pics/Visibility2.svg" /></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">34</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Пример </h1><div class="body"><img class="height" style="height: 100%" src="pics/Visibility3.svg" /></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">35</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Видимость изменений</h1><div class="body"><ul class="item-1 level-1"><li>Поток 2 точно изменения, произведенные потоком 1</li><li>Гарантировано<ul class="item-2 level-2"><li>После изменений поток 1 освободил блокировку, которую захватил поток 2</li><li>После изменения поток 1 создал поток 2</li><li>Поток 2 дождался окончания потока 1</li></ul></li><li>Возможно<ul class="item-2 level-2"><li>Любые другие изменения</li></ul></li><li><span class="warn">При неправильной синхронизации изменения могут быть видимы в произвольном порядке</span></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">36</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Пример</h1><div class="body"><ul class="item-1 level-1"><li>Программа<ul class="item-2 level-2"><li>Разделяемые переменные <pre class="prettyprint lang-java">int a = 0;
int b = 0;
</pre></li><li>Поток 1 <pre class="prettyprint lang-java">a = 10;
b = 2;
</pre></li><li>Поток 2 <pre class="prettyprint lang-java">System.out.println(a + b);
</pre></li></ul></li><li>Возможные результаты<ul class="item-2 level-2"><li><var>0</var>, <var>10</var>, <var>12</var></li><li><span class="warn">2</span></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">37</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Упорядоченность</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc">Синхронизация</a></li><li><a href="#(24)" class="toc current">Модель памяти Java</a><ol class="level-2 toc-2"><li><a href="#(27)" class="">Атомарность</a></li><li><a href="#(31)" class="">Видимость</a></li><li><a href="#(38)" class=" current">Упорядоченность</a></li><li><a href="#(41)" class="">Volatile</a></li></ol></li><li><a href="#(45)" class="toc">Примеры</a></li><li><a href="#(52)" class="toc">Советы и рекомендации</a></li><li><a href="#(66)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">38</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Порядок действий</h1><div class="body"><ul class="item-1 level-1"><li>Со своей точки зрения<ul class="item-2 level-2"><li>Поток выполняется последовательно</li></ul></li><li>С точки зрения других потоков<ul class="item-2 level-2"><li><span class="warn">Выполнение может производиться в произвольном порядке</span></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">39</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Пример</h1><div class="body"><ul class="item-1 level-1"><li>Программа<ul class="item-2 level-2"><li>Разделяемая переменная <pre class="prettyprint lang-java">int a = 0;
</pre></li><li>Поток <pre class="prettyprint lang-java">a = 1;
a = 2;
</pre></li></ul></li><li>Возможные видимые последовательности значений <var>а</var><ul class="item-2 level-2"><li><var>0…</var>, <var>0…01…</var>, <var>0…02…</var>, <var>0…01…12…</var>, <var>1…12…</var>, <var>2…</var></li><li><span class="warn">2…20…</span>, <span class="warn">2…21…</span>, <span class="warn">0…01…10…</span></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">40</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Volatile</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc">Синхронизация</a></li><li><a href="#(24)" class="toc current">Модель памяти Java</a><ol class="level-2 toc-2"><li><a href="#(27)" class="">Атомарность</a></li><li><a href="#(31)" class="">Видимость</a></li><li><a href="#(38)" class="">Упорядоченность</a></li><li><a href="#(41)" class=" current">Volatile</a></li></ol></li><li><a href="#(45)" class="toc">Примеры</a></li><li><a href="#(52)" class="toc">Советы и рекомендации</a></li><li><a href="#(66)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">41</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Volatile-переменные</h1><div class="body"><ul class="item-1 level-1"><li>Всегда атомарны</li><li>Чтение из общей памяти</li><li>Запись в общую память</li><li>Чтения и записи глобально упорядочены<ul class="item-2 level-2"><li>Видимость изменений</li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">42</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Пример 1. Список</h1><div class="body"><ul class="item-1 level-1"><li>Программа<ul class="item-2 level-2"><li>Разделяемая переменная <pre class="prettyprint lang-java">volatile List&lt;String&gt; list = null;
</pre></li><li>Поток 1 <pre class="prettyprint lang-java">List&lt;String&gt; l = new ArrayList&lt;&gt;();
l.add("Hello");
list = l;
</pre></li><li>Поток 2 <pre class="prettyprint lang-java">while (list == null) { }
return list.get(0);
</pre></li></ul></li><li>Не работает без <var>volatile</var></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">43</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Пример 2. Синглтон</h1><div class="body"><ul class="item-2 level-2"><li><pre class="prettyprint lang-java">public class Singleton {
    public static volatile Singleton instance;
    public static Singleton getInstance() {
        if (instance == null) {
            synchronized (Singleton.class) {
                if (instance == null) {
                    instance = new Singleton();
                }
            }
        }
        return instance;
    }
}
</pre></li><li>Не работает без <var>volatile</var></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">44</span></div></div></div></div>
<div class="slide section"><div class="content"><h1>Примеры</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc">Синхронизация</a></li><li><a href="#(24)" class="toc">Модель памяти Java</a></li><li><a href="#(45)" class="toc current">Примеры</a><ol class="level-2 toc-2"><li><a href="#(46)" class="">Взаимная блокировка</a></li><li><a href="#(49)" class="">Барьер</a></li></ol></li><li><a href="#(52)" class="toc">Советы и рекомендации</a></li><li><a href="#(66)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">45</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Взаимная блокировка</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc">Синхронизация</a></li><li><a href="#(24)" class="toc">Модель памяти Java</a></li><li><a href="#(45)" class="toc current">Примеры</a><ol class="level-2 toc-2"><li><a href="#(46)" class=" current">Взаимная блокировка</a></li><li><a href="#(49)" class="">Барьер</a></li></ol></li><li><a href="#(52)" class="toc">Советы и рекомендации</a></li><li><a href="#(66)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">46</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Гарантированный deadlock </h1><div class="body"><pre class="prettyprint lang-java">public void run() { // 0
    synchronized (o1) { // 1
        o1.notifyAll(); // 2
        synchronized (o2) { // 3
            try {
                o2.wait(); // unlock 4, await 5, lock 6
            } catch (InterruptedException e) {}
        } // 7
    } // 8
}
</pre></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">47</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Диаграмма переходов для deadlock </h1><div class="body"><div class="img-width"><img class="width" style="width: 65%" src="pics/DeadlockDiagram.svg" /></div></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">48</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Барьер</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc">Синхронизация</a></li><li><a href="#(24)" class="toc">Модель памяти Java</a></li><li><a href="#(45)" class="toc current">Примеры</a><ol class="level-2 toc-2"><li><a href="#(46)" class="">Взаимная блокировка</a></li><li><a href="#(49)" class=" current">Барьер</a></li></ol></li><li><a href="#(52)" class="toc">Советы и рекомендации</a></li><li><a href="#(66)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">49</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Барьер</h1><div class="body"><ul class="item-1 level-1"><li>Потоки дожидаются окончания друг друга <pre class="prettyprint lang-java">public await(Barrier that) { // 0
    synchronized (this) { // 1
        this.gen++;     // 2
        this.notify();    // 3
    } // 4
    synchronized (that) { // 5
        while (this.gen &gt; that.gen) { // 6
            that.wait(); // unlock 7, await 8, lock 9
        } // 10
    } // 11
}
</pre></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">50</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Диаграмма переходов для барьера </h1><div class="body"><div class="img-width"><img class="width" style="width: 65%" src="pics/BarrierDiagram.svg" /></div></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">51</span></div></div></div></div>
<div class="slide section"><div class="content"><h1>Советы и рекомендации</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc">Синхронизация</a></li><li><a href="#(24)" class="toc">Модель памяти Java</a></li><li><a href="#(45)" class="toc">Примеры</a></li><li><a href="#(52)" class="toc current">Советы и рекомендации</a><ol class="level-2 toc-2"><li><a href="#(53)" class="">Уровни безопасности</a></li><li><a href="#(60)" class="">Обеспечение потокобезопасности</a></li></ol></li><li><a href="#(66)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">52</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Уровни безопасности</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc">Синхронизация</a></li><li><a href="#(24)" class="toc">Модель памяти Java</a></li><li><a href="#(45)" class="toc">Примеры</a></li><li><a href="#(52)" class="toc current">Советы и рекомендации</a><ol class="level-2 toc-2"><li><a href="#(53)" class=" current">Уровни безопасности</a></li><li><a href="#(60)" class="">Обеспечение потокобезопасности</a></li></ol></li><li><a href="#(66)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">53</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Неизменяемые</h1><div class="body"><ul class="item-1 level-1"><li>Не изменяются с момента создания<ul class="item-2 level-2"><li>Все поля <var>final</var></li><li>Ссылаются только на неизменяемые объекты</li></ul></li><li>Потокобезопасны<ul class="item-2 level-2"><li>Синхронизация не требуется</li></ul></li><li>Immutable</li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">54</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Эффективно неизменяемые</h1><div class="body"><ul class="item-1 level-1"><li>Не изменяются с определенного момента<ul class="item-2 level-2"><li>Вся инициализация в одном потоке</li><li>Ссылаются только на (эффективно) неизменяемые объекты</li></ul></li><li>Потокобезопасны<ul class="item-2 level-2"><li>Корректно опубликованы</li></ul></li><li>Effectively immutable</li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">55</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Корректная публикация</h1><div class="body"><ul class="item-1 level-1"><li>Корректное получение ссылки на объект<ul class="item-2 level-2"><li>Полностью инициализирован</li><li>Опубликован с барьером</li><li>Получен с барьером</li></ul></li><li><span class="warn">Ссылки до окончания конструктора</span><ul class="item-2 level-2"><li><span class="warn">Переопределяемые методы</span></li><li><span class="warn">Регистрация слушателей</span></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">56</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Потокобезопасные</h1><div class="body"><ul class="item-1 level-1"><li>Внутренняя синхронизация<ul class="item-2 level-2"><li>Для одиночных операций синхронизация не требуется</li><li>Внешняя синхронизация при массовых операциях</li></ul></li><li>Thread-safe</li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">57</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Условно потокобезопасные</h1><div class="body"><ul class="item-1 level-1"><li>Внешняя синхронизация<ul class="item-2 level-2"><li>Синхронизация требуется для всех операций</li><li>Ответственность на вызывающем</li></ul></li><li>Conditionally thread-safe</li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">58</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Потоконебезопасные</h1><div class="body"><ul class="item-1 level-1"><li>Не могут использоваться в многопоточной среде<ul class="item-2 level-2"><li>Патологический случай</li><li>Глобальные переменные</li><li>Надо избегать</li></ul></li><li>Thread-hostile</li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">59</span></div></div></div></div>
<div class="slide subsection"><div class="content"><h1>Обеспечение потокобезопасности</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc">Синхронизация</a></li><li><a href="#(24)" class="toc">Модель памяти Java</a></li><li><a href="#(45)" class="toc">Примеры</a></li><li><a href="#(52)" class="toc current">Советы и рекомендации</a><ol class="level-2 toc-2"><li><a href="#(53)" class="">Уровни безопасности</a></li><li><a href="#(60)" class=" current">Обеспечение потокобезопасности</a></li></ol></li><li><a href="#(66)" class="toc">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">60</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Делегирование</h1><div class="body"><ul class="item-1 level-1"><li>Одно поле<ul class="item-2 level-2"><li>Ссылка не изменяется</li><li>Потокобезопасный объект</li><li>Атомарные или независимые операции</li></ul></li><li>Можно делегировать всю синхронизацию</li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">61</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Привязка к потоку</h1><div class="body"><ul class="item-1 level-1"><li>Один поток – один экземпляр<ul class="item-2 level-2"><li>Thread-local objects</li></ul></li><li>Проблемы с взаимодействием</li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">62</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Thread-local objects</h1><div class="body"><ul class="item-1 level-1"><li>Существует по одному на каждый поток<ul class="item-2 level-2"><li>Каждый может использовать безопасно</li></ul></li><li>Доступ<ul class="item-2 level-2"><li>Идентификатор</li><li>Чтение локального объекта</li><li>Запись локального объекта</li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">63</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Класс ThreadLocal</h1><div class="body"><ul class="item-1 level-1"><li>Класс <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/ThreadLocal.html" target="_blank">ThreadLocal&lt;T&gt;</a></var></li><li>Конструкторы<ul class="item-2 level-2"><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/ThreadLocal.html#%3Cinit%3E()" target="_blank">ThreadLocal()</a></var> – новый идентификатор</li></ul></li><li>Методы<ul class="item-2 level-2"><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/ThreadLocal.html#get()" target="_blank">get()</a></var> – чтение</li><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/ThreadLocal.html#set(T)" target="_blank">set(value)</a></var> – запись</li><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/ThreadLocal.html#remove()" target="_blank">remove()</a></var> – удаление</li></ul></li><li>Реализация<ul class="item-2 level-2"><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/ThreadLocal.html#initialValue()" target="_blank">initialValue()</a></var> – исходное значение</li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">64</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Класс InheritableThreadLocal</h1><div class="body"><ul class="item-1 level-1"><li>Наследуется при создании потока</li><li>Класс <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/InheritableThreadLocal.html" target="_blank">InheritableThreadLocal&lt;T&gt;</a></var> extends <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/ThreadLocal.html" target="_blank">ThreadLocal&lt;T&gt;</a></var></li><li>Методы<ul class="item-2 level-2"><li><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/InheritableThreadLocal.html#childValue(T)" target="_blank">childValue(value)</a></var> – значение для потомка</li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">65</span></div></div></div></div>
<div class="slide section"><div class="content"><h1>Заключение</h1><h2>Содержание</h2><div class="body"><ol class="level-1 toc-1"><li><a href="#(2)" class="toc">Синхронизация</a></li><li><a href="#(24)" class="toc">Модель памяти Java</a></li><li><a href="#(45)" class="toc">Примеры</a></li><li><a href="#(52)" class="toc">Советы и рекомендации</a></li><li><a href="#(66)" class="toc current">Заключение</a></li></ol></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">66</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Правила синхронизации</h1><div class="body"><ul class="item-1 level-1"><li>Работать с разделяемыми значениями только под блокировкой<ul class="item-2 level-2"><li>Взял блокировку</li><li>Прочел/изменил значение</li><li>Отпустил блокировку</li></ul></li><li>Мало блокировок<ul class="item-2 level-2"><li><span class="warn">При отсутствии правильной синхронизации потоки могут увидеть практически что угодно</span></li></ul></li><li>Много блокировок<ul class="item-2 level-2"><li><span class="warn">Взаимная блокировка</span></li></ul></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">67</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Ожидание</h1><div class="body"><ul class="item-1 level-1"><li>Используйте <var><var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Object.html#notify()" target="_blank">notify</a></var>[<var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Object.html#notifyAll()" target="_blank">All</a></var>]()</var> / <var><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Object.html#wait()" target="_blank">wait()</a></var><ul class="item-2 level-2"><li>Всегда под блокировкой</li><li>Различайте события</li></ul></li><li><span class="warn">Не допускайте активного ожидания</span></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">68</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Игра Deadlock Empire </h1><div class="body"><div class="img-width"><img class="width" style="width: 100%" src="pics/DeadlockEmpire.png" /></div><ul class="item-1 level-1"><li><a href="https://deadlockempire.github.io/" target="_blank">https://deadlockempire.github.io/</a></li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">69</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Ссылки</h1><div class="body"><ul class="item-1 level-1"><li>JLS. Threads and Locks // <a href="https://docs.oracle.com/javase/specs/jls/se21/html/jls-17.html" target="_blank">https://docs.oracle.com/javase/specs/jls/se21/<br />html/jls-17.html</a></li><li>Concurrency (Java Tutorial) // <a href="http://docs.oracle.com/javase/tutorial/essential/concurrency/" target="_blank">http://docs.oracle.com/javase/tutorial/essential/<br />concurrency/</a></li><li>Java Memory Model Pragmatics // <a href="http://shipilev.net/blog/2014/jmm-pragmatics/" target="_blank">http://shipilev.net/blog/2014/jmm-pragmatics/</a></li><li>Lea D. Concurrent Programming in Java</li><li>Goetz B. Java Concurrency in Practice</li></ul></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">70</span></div></div></div></div>
<div class="slide"><div class="content"><h1>Вопросы</h1><div class="body"><div class="questions">???</div></div><div class="footer"><div class="test"><span class="author">Georgiy Korneev</span><span class="title">Технологии Java / Взаимодействие потоков</span><span class="number">71</span></div></div></div></div></div></body></html>